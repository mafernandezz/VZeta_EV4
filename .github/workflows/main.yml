name: CI/CD - Build and Deploy Nginx App

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up QEMU for multi-platform build
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/nginx-technical-test:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/nginx-technical-test:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Variables
            CONTAINER_NAME="nginx-app"
            IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/nginx-technical-test:latest"
            
            # Detener y eliminar el contenedor antiguo si existe
            docker stop ${CONTAINER_NAME} || true
            docker rm ${CONTAINER_NAME} || true

            # Forzar la descarga de la nueva imagen desde Docker Hub
            docker pull ${IMAGE_NAME}

            # Ejecutar el nuevo contenedor
            docker run -d \
              -p 8080:8080 \
              --name ${CONTAINER_NAME} \
              --restart always \
              ${IMAGE_NAME}